@page "/StudentList"
@using Flic.Shared
@inject HttpClient _httpClient
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject NavigationManager NavigationManager
@inject NorthwindService service
@inject DialogService DialogService

<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<div class="min-h-screen bg-gray-100">
    <PageTitle>Danh sách Sinh viên</PageTitle>

    <AuthorizeView>
        <NotAuthorized>
            <div class="flex items-center justify-center h-screen">
                <span class="text-xl font-semibold text-red-600">Bạn không có quyền truy cập.</span>
            </div>
        </NotAuthorized>
        <Authorized Context="Auth">
            <div class="container mx-auto px-4 py-8">
                <!-- Header -->
                <div class="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                    <h3 class="text-2xl font-bold text-gray-800">Danh sách Sinh viên</h3>
                    <div class="flex space-x-4">
                        <button @onclick='() => NavigationManager.NavigateTo("/StudentAdd", true)' class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition duration-200">
                            Thêm mới
                        </button>
                        <button @onclick='() => NavigationManager.NavigateTo("/StudentImport", true)' class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition duration-200">
                            Import
                        </button>
                        <button @onclick="Export" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition duration-200">
                            Export XLS
                        </button>
                    </div>
                </div>

                <!-- Filter Section -->
                <div class="mb-4 flex flex-col md:flex-row md:items-center gap-4">
                    <div class="w-full md:w-1/3">
                        <label for="khoahoc" class="block text-sm font-medium text-gray-700 mb-1">Khóa học</label>
                        <select @onchange="OnKhoahocSelected" id="khoahoc" class="block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                            <option value="">--Chọn Khóa học--</option>
                            @if (KhoahocList != null)
                            {
                                @foreach (var khoahoc in KhoahocList)
                                {
                                    <option value="@khoahoc.Id" selected="@(khoahoc.Id == selectedKhoahoc ? "selected" : null)">
                                        @khoahoc.Name
                                    </option>
                                }
                            }
                        </select>
                    </div>
                    <div class="w-full md:w-1/3">
                        <label for="searchBox" class="block text-sm font-medium text-gray-700 mb-1">Tìm kiếm</label>
                        <input id="searchBox" type="text" class="block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                               @bind="searchTerm" @bind:event="oninput" placeholder="Tìm theo tên hoặc mã SV..." />
                    </div>
                </div>

                <!-- Responsive Table -->
                <div class="bg-white shadow-md rounded-lg overflow-hidden">
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Mã SV</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Họ đệm</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tên</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ngành</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Lớp</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Trạng thái</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Hành động</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @if (isLoading)
                                {
                                    <tr>
                                        <td colspan="8" class="px-6 py-4 text-center text-sm text-gray-500">Đang tải...</td>
                                    </tr>
                                }
                                else if (filteredStudents != null && filteredStudents.Any())
                                {
                                    @foreach (var item in filteredStudents)
                                    {
                                        <tr class="hover:bg-gray-50">
                                            <td class="px-4 py-4">@item.id</td>
                                            <td class="px-4 py-4">@item.MaSV</td>
                                            <td class="px-4 py-4">@item.HoDem</td>
                                            <td class="px-4 py-4">@item.Ten</td>
                                            <td class="px-4 py-4">@item.NganhID</td>
                                            <td class="px-4 py-4">@item.LopID</td>
                                            <td class="px-4 py-4">@item.Trangthai</td>
                                            <td class="px-4 py-4">
                                                <a href="/StudentEdit/@item.id" class="text-blue-600 hover:text-blue-800">Sửa</a>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="8" class="px-6 py-4 text-center text-sm text-gray-500">Không có dữ liệu.</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
</div>

@code {
    // --- State
    List<Student> students = new();
    List<Student> filteredStudents => FilterStudents();
    List<Khoahoc> KhoahocList = new();
    string selectedKhoahoc = ""; // mặc định là ""
    string searchTerm = "";
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            // Lấy danh sách Khóa học, mặc định chọn Khóa 12
            KhoahocList = await _httpClient.GetFromJsonAsync<List<Khoahoc>>("api/Khoahoc/KhoahocGetList") ?? new();
            var khoa12 = KhoahocList.FirstOrDefault(x => x.Name.Contains("12") || x.Id == "12"); // tùy theo dữ liệu
            if (khoa12 != null)
                selectedKhoahoc = khoa12.Id;
            else if (KhoahocList.Count > 0)
                selectedKhoahoc = KhoahocList.First().Id;

            await LoadStudents(selectedKhoahoc);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnKhoahocSelected(ChangeEventArgs e)
    {
        selectedKhoahoc = e.Value?.ToString() ?? "";
        isLoading = true;
        await LoadStudents(selectedKhoahoc);
        isLoading = false;
    }

    async Task LoadStudents(string khoahoc)
    {
        students.Clear();
        if (!string.IsNullOrEmpty(khoahoc))
        {
            var response = await _httpClient.GetAsync($"api/Student/GetStudentList/{khoahoc}");
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<List<Student>>();
                if (data != null)
                    students = data;
            }
        }
    }

    List<Student> FilterStudents()
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return students;
        var search = searchTerm.Trim().ToLower();
        return students.Where(s =>
            (!string.IsNullOrEmpty(s.MaSV) && s.MaSV.ToLower().Contains(search)) ||
            (!string.IsNullOrEmpty(s.Ten) && s.Ten.ToLower().Contains(search)) ||
            (!string.IsNullOrEmpty(s.HoDem) && s.HoDem.ToLower().Contains(search))
        ).ToList();
    }
    private void Export()
    {
        try
        {
            Query q = new Query()
            {
                Select = "id,MaSV,HoDem,Ten,NganhID,LopID,Trangthai"
            };
            // Gửi đúng selectedKhoahoc thôi vì lọc theo search là client-side
            service.Export2("Students", "excel", q, selectedKhoahoc);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

}
