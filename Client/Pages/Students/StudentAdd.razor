@page "/StudentAdd/"
@using Flic.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div class="max-w-3xl mx-auto py-10">
    <h2 class="text-2xl font-bold text-center mb-8 text-indigo-700">Thêm mới Sinh viên</h2>

    @if (!string.IsNullOrEmpty(ErrMessage))
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
            <strong>Lỗi:</strong> @ErrMessage
        </div>
    }

    <EditForm Model="@item" OnValidSubmit="@Save" class="space-y-8">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Khóa học -->
            <div>
                <label class="block mb-1 font-medium text-gray-700">Khóa học</label>
                <InputSelect class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-400" @bind-Value="@item.KhoahocID">
                    <option value="">---Chọn khóa học---</option>
                    @foreach (var it in KhoahocList)
                    {
                        <option value="@it.Id">@it.Name</option>
                    }
                </InputSelect>
            </div>
            <!-- Khoa -->
            <div>
                <label class="block mb-1 font-medium text-gray-700">Khoa</label>
                <InputSelect class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-400"
                             ValueChanged="@((string value) => KhoaHasChanged(value))"
                             ValueExpression="@(() => item.KhoaID)"
                             Value="@item.KhoaID">
                    <option value="">---Chọn Khoa---</option>
                    @foreach (var it in KhoaList)
                    {
                        <option value="@it.Id">@it.Name</option>
                    }
                </InputSelect>
            </div>
            <!-- Ngành -->
            <div>
                <label class="block mb-1 font-medium text-gray-700">Ngành</label>
                <InputSelect class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-400"
                             ValueChanged="@((string value) => NganhHasChanged(value))"
                             ValueExpression="@(() => item.NganhID)"
                             Value="@item.NganhID">
                    <option value="">---Chọn ngành---</option>
                    @foreach (var it in NganhList)
                    {
                        <option value="@it.Id">@it.Name</option>
                    }
                </InputSelect>
            </div>
            <!-- Lớp -->
            <div>
                <label class="block mb-1 font-medium text-gray-700">Lớp</label>
                <InputSelect class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-400" @bind-Value="@item.LopID">
                    <option value="">---Chọn Lớp---</option>
                    @foreach (var it in LopList)
                    {
                        <option value="@it.Id">@it.Name</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
                <label class="block mb-1 font-medium text-gray-700">Mã Sinh viên</label>
                <InputText class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-400" @bind-Value="@item.MaSV" placeholder="Nhập mã SV" />
            </div>
            <div>
                <label class="block mb-1 font-medium text-gray-700">Họ và đệm</label>
                <InputText class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-400" @bind-Value="@item.HoDem" placeholder="Nhập họ và đệm" />
            </div>
            <div>
                <label class="block mb-1 font-medium text-gray-700">Tên</label>
                <InputText class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-400" @bind-Value="@item.Ten" placeholder="Nhập tên" />
            </div>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
                <label class="block mb-1 font-medium text-gray-700">Ngày sinh</label>
                <InputText type="date" class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-400" @bind-Value="@item.Ngaysinh" placeholder="yyyy-mm-dd" />
            </div>
            <div>
                <label class="block mb-1 font-medium text-gray-700">Email</label>
                <InputText type="email" class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-400" @bind-Value="@item.Email" placeholder="Nhập email" />
            </div>
            <div>
                <label class="block mb-1 font-medium text-gray-700">Điện thoại</label>
                <InputText class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-400" @bind-Value="@item.DienThoai" placeholder="Nhập số điện thoại" />
            </div>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
                <label class="block mb-1 font-medium text-gray-700">CCCD</label>
                <InputText class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-400" @bind-Value="@item.CCCD" placeholder="Nhập CCCD" />
            </div>
            <div>
                <label class="block mb-1 font-medium text-gray-700">Số tài khoản</label>
                <InputText class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-400" @bind-Value="@item.SoTK" placeholder="Nhập số tài khoản" />
            </div>
            <div>
                <label class="block mb-1 font-medium text-gray-700">Trạng thái</label>
                <InputSelect class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-400" @bind-Value="@item.Trangthai">
                    <option value="">---Chọn Trạng thái---</option>
                    @foreach (var it in TrangthaiList)
                    {
                        <option value="@it.Id">@it.Name</option>
                    }
                </InputSelect>
            </div>
        </div>

        <!-- Nút Save/Cancel -->
        <div class="flex justify-center space-x-4 mt-6">
            <button type="submit" class="bg-indigo-600 text-white font-semibold px-6 py-2 rounded-lg hover:bg-indigo-700 transition">Lưu</button>
            <button type="button" @onclick="Cancel" class="bg-gray-300 text-gray-800 font-semibold px-6 py-2 rounded-lg hover:bg-gray-400 transition">Hủy</button>
        </div>
    </EditForm>
</div>

@code {
    Student item = new Student();
    List<Khoa> KhoaList = new();
    List<Khoahoc> KhoahocList = new();
    List<Nganh> NganhList = new();
    List<Lop> LopList = new();
    List<StudentStatus> TrangthaiList = new();
    public string ErrMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync("api/Khoa/KhoaGetList");
            KhoaList = await response.Content.ReadFromJsonAsync<List<Khoa>>() ?? new();
            response = await Http.GetAsync("api/Khoahoc/KhoahocGetList");
            KhoahocList = await response.Content.ReadFromJsonAsync<List<Khoahoc>>() ?? new();
            response = await Http.GetAsync("api/StudentStatus/StudentStatusGetList");
            TrangthaiList = await response.Content.ReadFromJsonAsync<List<StudentStatus>>() ?? new();
            ErrMessage = "";
        }
        catch (Exception e)
        {
            ErrMessage = e.Message;
        }
    }
    protected async Task Save()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Student/StudentAdd", item);
            await JsRuntime.InvokeVoidAsync("alert", "Lưu thành công!");
            NavigationManager.NavigateTo("StudentList");
            ErrMessage = "";
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Có lỗi: " + e.Message);
            ErrMessage = e.Message;
        }
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("StudentList");
    }
    private async Task KhoaHasChanged(string value)
    {
        item.KhoaID = value;
        if (string.IsNullOrEmpty(value))
        {
            NganhList.Clear();
            LopList.Clear();
        }
        else
        {
            await LoadNganh(value);
        }
    }
    private async Task LoadNganh(string khoaId)
    {
        var response = await Http.GetAsync("api/Nganh/NganhGetListByKhoa/" + khoaId);
        NganhList = await response.Content.ReadFromJsonAsync<List<Nganh>>() ?? new();
        LopList.Clear();
    }
    private async Task NganhHasChanged(string value)
    {
        item.NganhID = value;
        if (string.IsNullOrEmpty(value))
        {
            LopList.Clear();
        }
        else
        {
            await LoadLop(value);
        }
    }
    private async Task LoadLop(string nganhId)
    {
        if (string.IsNullOrEmpty(item.KhoahocID)) return;
        var response = await Http.GetAsync($"api/Lop/LopGetListByKhoahocNganh/{item.KhoahocID}/{nganhId}");
        LopList = await response.Content.ReadFromJsonAsync<List<Lop>>() ?? new();
    }
}
