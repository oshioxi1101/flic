@page "/StudentList2"
@inject NavigationManager NavigationManager

@*@attribute [Authorize(Roles = "Admin")]*@

@using Flic.Shared
@using Newtonsoft.Json
@inject HttpClient Http

<div>
    <PageTitle>Danh sách sinh viên</PageTitle>        
    
    <AuthorizeView>
        <NotAuthorized>
            <span>You're not authorize</span>
        </NotAuthorized>
        <Authorized Context="Auth">
            <EditForm Model="@item" OnValidSubmit="@Save">
                <div class="row">
                    
                    <h3>Danh sách Sinh viên</h3>
                    <div class="col-md-2">
                        <a href="/StudentAdd"> Thêm mới</a>
                    </div>
                    <div class="col-md-2">
                        <a href="/StudentImport"> Nhập khẩu danh sách</a>
                    </div>
                       
                </div>
                

                <div class="row">                    
                        <div class="col-md-2">
                            <InputSelect class="form-control" @bind-Value="@item.KhoahocID">
                                <option value="">---Chọn khóa học---</option>
                                @if (KhoahocList != null)
                                {
                                    @foreach (var it in KhoahocList)
                                    {
                                        <option value="@it.Id">@it.Name</option>
                                    }
                                }

                            </InputSelect>
                        </div>
                        <div class="col-md-2">
                            <InputSelect class="form-control" ValueChanged="@((string value ) => KhoaHasChanged(value))" ValueExpression="@(() => item.KhoaID)" Value="@item.KhoaID">
                                <option value="">---Chọn khoa---</option>
                                @if (KhoaList != null)
                                {
                                    @foreach (var it in KhoaList)
                                    {
                                        <option value="@it.Id">@it.Name</option>
                                    }
                                }

                            </InputSelect>
                        </div>
                        <div class="col-md-2">
                            <InputSelect class="form-control" ValueChanged="@((string value ) => NganhHasChanged(value))" ValueExpression="@(() => item.NganhID)" Value="@item.NganhID">
                                <option value="">---Chọn ngành---</option>

                                @if (NganhList != null)
                                {
                                    @foreach (var it in NganhList)
                                    {
                                        <option value="@it.Id">@it.Name</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-2">
                            <InputSelect class="form-control" @bind-Value="@item.LopID">
                                <option value="">---Chọn Lớp---</option>
                                @if (LopList != null)
                                {
                                    @foreach (var it in LopList)
                                    {
                                        <option value="@it.Id">@it.Name</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-2">
                            <InputSelect class="form-control" @bind-Value="@item.Trangthai">
                                <option value="">---Trạng thái---</option>
                                @if (TrangthaiList != null)
                                {
                                    @foreach (var it in TrangthaiList)
                                    {
                                        <option value="@it.Id">@it.Name</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-1">
                            <InputText type="text" class="form-control" placeholder="Tìm kiếm theo tên" @bind-Value="@item.KeyWord"  />
                        </div>
                        <div class="col-md-1">
                        <button type="button" class="form-control" @onclick="Filter">Filter</button>
                        </div>

                </div>
                <div class="row">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Mã SV</th>
                                <th>Họ đệm</th>
                                <th>Tên</th>
                                <th>Ngày sinh</th>
                                <th>Khóa</th>
                                <th>Ngành</th>
                                <th>Lớp</th>
                                <th>Trạng thái</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (item.student_list != null)
                            {
                                int i = (item.Page.Value - 1) * item.Pagesize.Value + 1;
                                foreach (Student item in item.student_list)
                                {
                                    <tr>
                                        <td>@i</td>
                                        <td>@item.MaSV</td>
                                        <td>@item.HoDem</td>
                                        <td>@item.Ten</td>
                                        <td>@item.Ngaysinh</td>
                                        <td>@item.KhoahocID</td>
                                        <td>@item.NganhID</td>
                                        <td>@item.LopID</td>
                                        <td>@item.Trangthai</td>
                                        <td>
                                            <a href="/StudentEdit/@item.id">Edit</a> |
                                            <a href="/StudentDelete/@item.id">Delete</a>
                                        </td>
                                    </tr>
                                    i = i + 1;
                                }
                            }

                        </tbody>
                    </table>
                    @if (item.NumPage > 1){
                        //int numPag = 10;                       

                        //if (item.NumPage < numPag) 
                        int numPag = item.NumPage.Value;
                        
                        <nav aria-label="Page navigation example">
                            <ul class="pagination justify-content-center">                                
                                <li onclick=@(() => OnSelectedPage(1)) style="cursor: pointer;" class="page-item">
                                    <span class="page-link" href="#"> &#60;&#60; </span>
                                </li>
                                @for (int i = 0; i < numPag; i++){
                                    var local_index = i +1;
                                    var active = item.Page.Value == (i+1) ? "disabled active" : null;

                                    <li onclick=@(() => OnSelectedPage(local_index))   style="cursor: pointer;" class="page-item @active">
                                        <span class="page-link" href="#">@local_index</span>
                                    </li>
                                }
                                <li onclick=@(() => OnSelectedPage(item.NumPage.Value)) style="cursor: pointer;" class="page-item">
                                    <span class="page-link" href="#"> &#62;&#62; </span>
                                </li>
                            </ul>
                        </nav>
                        
                    }
                    
                </div>
                
        </EditForm>
        </Authorized>
    </AuthorizeView>
</div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private StudentSearchOption item = new StudentSearchOption();
    private List<Student> student_litst;
    private List<Khoahoc> KhoahocList;
    private List<Khoa> KhoaList;
    private List<Nganh> NganhList;
    private List<Lop> LopList;
    List<StudentStatus> TrangthaiList = new List<StudentStatus>();

    private string KhoahocID;
    private string KhoaID;
    private string NganhID;
    private string LopID;
    protected string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {   

        try{
            var response = await Http.PostAsJsonAsync<StudentSearchOption>("/api/student/PostStudentList", item);
            if (response.IsSuccessStatusCode)
            {
                var strinResp = await response.Content.ReadAsStringAsync();
                item = JsonConvert.DeserializeObject<StudentSearchOption>(strinResp);   
            }else {
                if ((int)response.StatusCode == 401){
                    NavigationManager.NavigateTo("/Login", true);
                }
            }

            //student_litst = await Http.GetFromJsonAsync<Student[]>("api/student");
            KhoahocList = await Http.GetFromJsonAsync<List<Khoahoc>>("api/Khoahoc/KhoahocGetList");
            KhoaList = await Http.GetFromJsonAsync<List<Khoa>>("api/Khoa/KhoaGetList");    

            TrangthaiList = await Http.GetFromJsonAsync<List<StudentStatus>>("api/StudentStatus/StudentStatusGetList");            

        }
        catch (Exception e){
            Console.WriteLine("Error" + e.Message.ToString());
        }

    }
    private async Task OnSelectedPage(int p)
    {
        item.Page = p;
        item.student_list = null;
        var response = await Http.PostAsJsonAsync<StudentSearchOption>("/api/student/PostStudentList", item);
        if (response.IsSuccessStatusCode)
        {
            var strinResp = await response.Content.ReadAsStringAsync();            
            item = JsonConvert.DeserializeObject<StudentSearchOption>(strinResp);
            //student_litst = res.student_litst;
            this.StateHasChanged();
        }
    }
    protected async Task Save()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Student/StudentAdd", @item);
            //await JsRuntime.InvokeVoidAsync("alert", "Saved Successfully!");
            //NavigationManager.NavigateTo("StudentList");
            //ErrMessage = "";
        }
        catch (Exception e)
        {
            //await JsRuntime.InvokeVoidAsync("alert", "Error:" + e.Message);
            //ErrMessage = e.Message;
        }

    }
    private async Task KhoaHasChanged(string value)
    {
        item.KhoaID = value;
        //SelectedId = value;

        if (value == "")
        {
            NganhList.Clear();
        }
        else
        {
            var response = await Http.GetAsync("api/Nganh/NganhGetListByKhoa/" + value);
            NganhList = await response.Content.ReadFromJsonAsync<List<Nganh>>();
        }
    }
    private async Task NganhHasChanged(string value)
    {
        item.NganhID = value;

        if (value == "")
        {
            LopList.Clear();
        }
        else
        {
            var response = await Http.GetAsync("api/Lop/LopGetListByKhoahocNganh/" + item.KhoahocID + "/" + value);
            LopList = await response.Content.ReadFromJsonAsync<List<Lop>>();
            this.StateHasChanged();
        }
    }

    protected async void KhoaChange(ChangeEventArgs _khoaId)
    {
        KhoaID = _khoaId.Value.ToString();
        var response = await Http.GetAsync("api/Nganh/NganhGetListByKhoa/" + _khoaId.Value.ToString());
        NganhList = await response.Content.ReadFromJsonAsync<List<Nganh>>();        
        this.StateHasChanged();
    }

    protected async void NganhChange(ChangeEventArgs nganhId)
    {
        var response = await Http.GetAsync("api/Lop/LopGetListByKhoahocNganh/" + KhoahocID + "/" + nganhId.Value);
        LopList = await response.Content.ReadFromJsonAsync<List<Lop>>();        
        this.StateHasChanged();
    }

    protected async void Filter()
    {
        item.student_list = null;
        item.Page = null;
        item.NumPage = null;
        var response = await Http.PostAsJsonAsync<StudentSearchOption>("/api/student/PostStudentList", item);
        if (response.IsSuccessStatusCode)
        {
            var strinResp = await response.Content.ReadAsStringAsync();            
            item = JsonConvert.DeserializeObject<StudentSearchOption>(strinResp);
            this.StateHasChanged();
        }
    }

    protected void ResetSearch()
    {
        SearchString = string.Empty;
        //staffList = searchData;
    }
}
