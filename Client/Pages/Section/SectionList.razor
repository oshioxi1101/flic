@page "/SectionList"
@using Flic.Shared
@using System.Net.Http.Headers
@inject HttpClient _httpClient
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject NavigationManager NavigationManager
@inject NorthwindService service
@inject IJSRuntime JsRuntime

<div>
    <PageTitle>Danh sách mục tin</PageTitle>

    <AuthorizeView>
        <NotAuthorized>
            <span>Bạn phải đăng nhập bằng tài khoản quản trị để thực hiện chức năng này</span>
        </NotAuthorized>
        <Authorized Context="Auth">
            <div class="row">
                <h3>Danh sách mục tin</h3>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <RadzenButton Click=@(args => OnClick("/SectionAdd")) Text="Thêm mới" ButtonStyle="ButtonStyle.Primary" />                    
                </div>
                <RadzenDataGrid @ref="grid" AllowColumnPicking="false" AllowFiltering="true"
                                FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true"
                                Data="@list" TItem="Section" PageSize="40" AllowColumnResize="true">
                    <Columns>
                        <RadzenDataGridColumn TItem="Section" Property="Id" Title="ID" Width="140px" Filterable="false" />
                        <RadzenDataGridColumn TItem="Section" Property="Name" Title="Tên Mục tin" />


                        <RadzenDataGridColumn TItem="Section" Property="" Title="" Filterable="false">
                            <Template Context="data">
                                <a href="/SectionEdit/@data.Id">Edit</a> |
                                <a href="/SectionDelete/@data.Id">Delete</a>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </div>

        </Authorized>
    </AuthorizeView>
</div>

@code {
    string ErrMessage = "";
    List<Section> list = new List<Section>();
    RadzenDataGrid<Section> grid;

    void OnClick(string link)
    {
        NavigationManager.NavigateTo(link, true);
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await _httpClient.GetAsync("api/Section/SectionGetList");
            response.EnsureSuccessStatusCode();
            if (response.IsSuccessStatusCode)
            {
                list = await response.Content.ReadFromJsonAsync<List<Section>>();
            }else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Error: " + response.StatusCode + " " + response.Content.ToString());
            }

            ErrMessage = "";
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            ErrMessage = e.Message;
        }
    }    
}
