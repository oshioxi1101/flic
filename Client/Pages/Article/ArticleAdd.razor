@page "/ArticleAdd/"
@using Flic.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@using Newtonsoft.Json

<AuthorizeView>
    <NotAuthorized>
        <div class="flex items-center justify-center h-40">
            <span class="text-lg font-semibold text-red-500">Bạn không có quyền truy cập</span>
        </div>
    </NotAuthorized>
    <Authorized Context="Auth">
        <div class="max-w-3xl mx-auto mt-10 bg-white shadow-2xl rounded-2xl p-8">
            <h2 class="text-2xl font-bold text-indigo-700 mb-8 text-center">Thêm bài viết mới</h2>
            <RadzenTemplateForm TItem="Article" Data=@item Submit=@OnSubmit class="space-y-8">
                <!-- Tiêu đề -->
                <div>
                    <label class="block mb-1 font-medium text-gray-700">Tiêu đề <span class="text-red-500">*</span></label>
                    <RadzenTextBox Name="Title" @bind-Value=@item.Title class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-indigo-400" />
                    <RadzenRequiredValidator Component="Title" Text="Nhập Tên" Style="color:#e11d48" />
                </div>

                <!-- Mục tin -->
                <div>
                    <label class="block mb-1 font-medium text-gray-700">Mục tin</label>
                    <RadzenDropDown TValue="int" Data=@SectionList TextProperty="Name" ValueProperty="Id" @bind-Value=@item.SectionId
                                    class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-indigo-400" />
                </div>

                <!-- Mô tả -->
                <div>
                    <label class="block mb-1 font-medium text-gray-700">Mô tả bài viết</label>
                    <RadzenHtmlEditor @bind-Value=@item.ArticleAbstract style="height: 200px;"
                                      Input=@OnInput Change=@OnChange Paste=@OnPaste Execute=@OnExecute UploadUrl="api/upload/image" />
                </div>

                <!-- Ảnh đại diện -->
                <div>
                    <label class="block mb-1 font-medium text-gray-700">Ảnh đại diện</label>
                    <div class="flex flex-col md:flex-row items-start gap-4">
                        <RadzenUpload Multiple="false" Accept="image/*" Url="api/upload/single"
                                      Progress=@(args => OnProgress(args, "Images only upload"))
                                      Complete=@(args => OnComplete(args))
                                      @bind-Value=@item.ImagePath />
                        @if (!string.IsNullOrEmpty(item.ImagePath))
                        {
                            <RadzenImage Path="@item.ImagePath" Style="width: 10rem; border-radius: 8px; box-shadow: 0 1px 5px #0001;" />
                        }
                    </div>
                </div>

                <!-- Nội dung -->
                <div>
                    <label class="block mb-1 font-medium text-gray-700">Nội dung bài viết</label>
                    <RadzenHtmlEditor @bind-Value=@item.ArticleContent style="height: 300px;"
                                      Input=@OnInput Change=@OnChange Paste=@OnPaste Execute=@OnExecute UploadUrl="api/upload/image" />
                </div>

                <!-- Nút lưu/hủy -->
                <div class="flex justify-center gap-6 mt-8">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Lưu"
                                  class="!bg-indigo-600 !text-white !font-semibold !rounded-lg !shadow hover:!bg-indigo-700 !px-8 !py-2 transition" />
                    <RadzenButton ButtonType="ButtonType.Button" Click=@Cancel Text="Hủy"
                                  class="!bg-gray-300 !text-gray-800 !font-semibold !rounded-lg !shadow hover:!bg-gray-400 !px-8 !py-2 transition" />
                </div>
            </RadzenTemplateForm>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    Article item = new Article();
    List<Section> SectionList = new List<Section>();
    int progress;
    bool showProgress;
    bool showComplete;
    string completionMessage;
    bool cancelUpload = false;
    string console;

    class UploadResponse
    {
        public string url { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync("api/Section/SectionGetList");
            if (response.IsSuccessStatusCode)
                SectionList = await response.Content.ReadFromJsonAsync<List<Section>>();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    void CompleteUpload(UploadCompleteEventArgs args)
    {
        completionMessage = args.Cancelled ? "Upload Cancelled!" : "Upload Complete!";
        showProgress = false;
        showComplete = true;
    }

    void TrackProgress(UploadProgressArgs args)
    {
        showProgress = true;
        showComplete = false;
        progress = args.Progress;
        args.Cancel = cancelUpload;
        cancelUpload = false;
    }

    void CancelUpload() => cancelUpload = true;
    void OnChange(UploadChangeEventArgs args, string name) { }
    void OnProgress(UploadProgressArgs args, string name) { }
    void OnComplete(UploadCompleteEventArgs args)
    {
        UploadResponse rs = JsonConvert.DeserializeObject<UploadResponse>(args.RawResponse);
        item.ImagePath = rs.url;
    }
    void OnPaste(HtmlEditorPasteEventArgs args) => console = args.Html;
    void OnChange(string html) => console = html;
    void OnInput(string html) => console = html;
    void OnExecute(HtmlEditorExecuteEventArgs args) => console = args.CommandName;

    protected async Task OnSubmit()
    {
        try
        {
            item.CreateDate = DateTime.Now;
            item.UpdateDate = DateTime.Now;
            item.Status = 1;
            var response = await Http.PostAsJsonAsync("api/Article/ArticleAdd", @item);
            if (response.IsSuccessStatusCode)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Saved Successfully!");
                NavigationManager.NavigateTo("ArticleList");
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Error: " + response.StatusCode + " " + response.Content.ToString());
            }
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error:" + e.Message);
        }
    }
    void Cancel() => NavigationManager.NavigateTo("ArticleList");
}
