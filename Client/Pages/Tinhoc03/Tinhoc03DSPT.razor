@page "/Tinhoc03DSPT"
@using Flic.Shared
@using System.Net.Http.Headers
@inject HttpClient _httpClient
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject NavigationManager NavigationManager
@inject NorthwindService service
@inject IJSRuntime JsRuntime

<div class="max-w-7xl mx-auto px-4 py-10">
    <PageTitle>Danh sách Phòng thi chứng chỉ CNTT</PageTitle>

    <AuthorizeView>
        <NotAuthorized>
            <div class="flex items-center justify-center h-40">
                <span class="text-lg font-semibold text-red-500">Bạn không có quyền truy cập</span>
            </div>
        </NotAuthorized>
        <Authorized Context="Auth">
            <div class="mb-6 flex flex-col md:flex-row md:items-center gap-4">
                <h3 class="text-2xl font-bold text-indigo-700 flex-1">Danh sách Phòng thi chứng chỉ ứng dụng CNTT</h3>
                <a href="/Tinhoc03LapDSPT" class="bg-indigo-600 hover:bg-indigo-700 text-white px-5 py-2 rounded-lg font-medium shadow transition">Lập DS phòng thi</a>
            </div>

            <!-- Bộ lọc và Export -->
            <div class="bg-white rounded-xl shadow-lg p-6 mb-8 flex flex-col md:flex-row md:items-end gap-4">
                <div class="flex-1 min-w-[200px]">
                    <label class="block mb-1 font-medium text-gray-700">Đợt thi</label>
                    <RadzenDropDown Data="@_dotthiList"
                                    TextProperty="Name"
                                    ValueProperty="Id"
                                    @bind-Value="@maDotthi"
                                    Placeholder="--Chọn Đợt thi--"
                                    AllowClear="true"
                                    Multiple="true"
                                    TValue="List<string>"
                                    Change="@OnChange"
                                    Style="width: 100%;"
                                    class="border border-gray-300 rounded-lg" />
                </div>
                <div class="flex-1 flex flex-wrap gap-2">
                    <RadzenButton Text="Phòng thi" Icon="grid_on" Click="@(args => Export("PT", "excel"))"
                                  class="!bg-indigo-600 !text-white !rounded-lg hover:!bg-indigo-700 !px-4 !py-2" />
                    <RadzenButton Text="DS Ảnh" Icon="grid_on" Click="@(args => Export("ANH", "excel"))"
                                  class="!bg-green-600 !text-white !rounded-lg hover:!bg-green-700 !px-4 !py-2" />
                    <RadzenButton Text="Lý thuyết" Icon="grid_on" Click="@(args => Export("LT", "excel"))"
                                  class="!bg-yellow-500 !text-white !rounded-lg hover:!bg-yellow-600 !px-4 !py-2" />
                    <RadzenButton Text="Thực hành" Icon="grid_on" Click="@(args => Export("TH", "excel"))"
                                  class="!bg-blue-500 !text-white !rounded-lg hover:!bg-blue-600 !px-4 !py-2" />
                    <RadzenButton Text="TKSV" Icon="grid_on" Click="@(args => Export("TKPT", "excel"))"
                                  class="!bg-pink-500 !text-white !rounded-lg hover:!bg-pink-600 !px-4 !py-2" />
                    <RadzenButton Text="TKM" Icon="grid_on" Click="@(args => Export("TK", "excel"))"
                                  class="!bg-gray-500 !text-white !rounded-lg hover:!bg-gray-600 !px-4 !py-2" />
                </div>
            </div>

            @if (!string.IsNullOrEmpty(msg) || !string.IsNullOrEmpty(a_msg))
            {
                <div class="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded mb-4 flex items-center gap-2">
                    <span>@msg</span>
                    @if (!string.IsNullOrEmpty(link_file) && link_file != "#")
                    {
                        <a class="font-semibold underline text-green-800" href="@link_file" target="_blank">@a_msg</a>
                    }
                </div>
            }

            <!-- Bảng danh sách -->
            <div class="bg-white shadow-xl rounded-xl p-6 overflow-x-auto">
                <RadzenDataGrid @ref="grid" IsLoading="@isLoading" Count="@count" Data="@list"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                FilterMode="FilterMode.Advanced"
                                AllowSorting="true"
                                AllowColumnPicking="false"
                                AllowFiltering="true"
                                AllowPaging="true"
                                PageSize="30"
                                PagerHorizontalAlign="HorizontalAlign.Center"
                                TItem="DangkyTH03_View"
                                AllowColumnalseResize="true"
                                class="w-full">
                    <Columns>
                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="stt" Title="STT" Filterable="false" Width="70px" />
                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="SoBD" Title="SBD" Width="120px" />
                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="CCCD" Title="CCCD" Width="130px" />
                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="HovaDem" Title="Họ đệm" Width="160px" />
                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="Ten" Title="Tên" Width="120px" />
                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="GioiTinh" Title="Giới" Width="80px">
                            <Template Context="data">
                                @gt[data.GioiTinh ?? 0]
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="NgaySinh" Title="Ngày sinh" Filterable="false" Width="120px" />
                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="NoiSinh_Tinh_Ten" Title="Nơi sinh" Width="150px" />
                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="PhongThi" Title="Phòng thi" Filterable="false" Width="120px" />
                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="CaThi" Title="Ca thi" Filterable="false" Width="100px" />
                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="Matkhau" Title="Mật khẩu" Filterable="false" Width="120px" />
                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="" Title="" Filterable="false" Width="80px">
                            <Template Context="data">
                                <AuthorizeView Roles="Admin,QUANLY">
                                    <a class="text-indigo-600 hover:text-indigo-900 font-semibold underline" href="/Tinhoc03TheDuthi/@data.Id">Thẻ</a>
                                </AuthorizeView>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </div>
        </Authorized>
    </AuthorizeView>
</div>

@code {
    IEnumerable<DangkyTH03_View> list;
    LapDSTinhoc para = new LapDSTinhoc();
    RadzenDataGrid<DangkyTH03_View> grid;
    List<string> dotthList = new List<string>();
    IEnumerable<string> selectedDotthi;
    List<bool> DuDKthiList = new List<bool>();
    IEnumerable<bool> selectedDuDKThi;
    List<Dotthi> _dotthiList;
    List<string> maDotthi = new();
    List<string> gt = new() { "Nữ", "Nam" };
    bool isLoading;
    int count;
    string link_file = "#";
    string a_msg, msg;

    void OnClick(string link)
    {
        string combinedString = string.Join(";", maDotthi.ToArray());
        link = link + "/" + combinedString;
        NavigationManager.NavigateTo(link, true);
    }
    async void Filter()
    {
        var response = await _httpClient.PostAsJsonAsync("api/DangkyTH03/TH03GetDSPTView", @maDotthi);
        if (response.IsSuccessStatusCode)
        {
            list = await response.Content.ReadFromJsonAsync<List<DangkyTH03_View>>();
            InvokeAsync(StateHasChanged);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _dotthiList = await _httpClient.GetFromJsonAsync<List<Dotthi>>("api/Dotthi/DotthiGetList");
            if (_dotthiList != null)
            {
                foreach (var it in _dotthiList)
                {
                    dotthList.Add(it.Id);
                }
            }
            DuDKthiList.Clear();
            DuDKthiList.Add(true);
            DuDKthiList.Add(false);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
    async Task OnSelectedDotthiChange(object value)
    {
        if (selectedDotthi != null && !selectedDotthi.Any())
        {
            selectedDotthi = null;
        }
        await grid.FirstPage();
    }
    async Task OnSelectedDuDKThiChange(object value)
    {
        if (selectedDuDKThi != null && !selectedDuDKThi.Any())
        {
            selectedDuDKThi = null;
        }
        await grid.FirstPage();
    }
    public async void Export(string w, string type)
    {
        if (list == null || !list.Any())
        {
            await JsRuntime.InvokeVoidAsync("alert", "Bạn chưa chọn đợt thi");
            return;
        }
        List<DangkyTH03_View> l1 = new(list);
        try
        {
            Query q = new Query()
            {
                OrderBy = grid.Query.OrderBy,
                Filter = grid.Query.Filter,
                Select = string.Join(",", grid.ColumnsCollection.Where(c => c.GetVisible()))
            };
            string combinedString = string.Join(";", maDotthi.ToArray());
            if (w == "PT")
                service.Export2("Tinhoc03DSPT2Excel", type, q, combinedString);
            else if (w == "TK")
                service.Export2("Tinhoc03DSTaikhoan", type, q, combinedString);
            else if (w == "TKPT")
                service.Export2("Tinhoc03DSTaikhoanPT", type, q, combinedString);
            else if (w == "LT")
                service.Export2("Tinhoc03DSLT2Excel", type, q, combinedString);
            else if (w == "TH")
                service.Export2("Tinhoc03DSTH2Excel", type, q, combinedString);
            else if (w == "ANH")
                service.Export2("Tinhoc03DsAnh", type, q, combinedString);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        list = l1;
        InvokeAsync(StateHasChanged);
    }
    private async void OnChange(object args)
    {
        if (maDotthi != null && maDotthi.Count > 0)
        {
            string combinedString = string.Join(";", maDotthi.ToArray());
            var response = await _httpClient.PostAsJsonAsync("api/DangkyTH03/TH03GetDSPTView", @combinedString);
            if (response.IsSuccessStatusCode)
            {
                list = await response.Content.ReadFromJsonAsync<List<DangkyTH03_View>>();
                InvokeAsync(StateHasChanged);
            }
        }
    }
}
