@page "/Tinhoc03PhieuDK"
@using Flic.Shared
@using System.Net.Http.Headers
@inject HttpClient _httpClient
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject NavigationManager NavigationManager
@inject NorthwindService service
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<div class="max-w-6xl mx-auto px-4 py-8">
    <PageTitle>Danh sách phiếu đăng ký thi chứng chỉ tin học</PageTitle>

    <AuthorizeView>
        <NotAuthorized>
            <div class="flex items-center justify-center h-40">
                <span class="text-lg font-semibold text-red-500">Bạn không có quyền truy cập</span>
            </div>
        </NotAuthorized>
        <Authorized Context="Auth">
            <div class="flex flex-col md:flex-row md:items-center justify-between mb-8 gap-4">
                <h3 class="text-2xl font-bold text-indigo-700 flex-1">Danh sách Phiếu đăng ký</h3>
                <RadzenButton Click=@(args => OnClick("/Tinhoc03Register"))
                              Text="Thêm mới"
                              class="!bg-indigo-600 !text-white !font-semibold !rounded-lg !shadow hover:!bg-indigo-700 !px-6 !py-2 transition" />
            </div>
            @if (!string.IsNullOrEmpty(ErrMessage))
            {
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
                    <strong>Lỗi:</strong> @ErrMessage
                </div>
            }
            <div class="grid gap-6 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3">
                @if (list != null && list.Count > 0)
                {
                    @foreach (var item in list)
                    {
                        <div class="bg-white rounded-xl shadow hover:shadow-xl border border-gray-100 p-6 flex flex-col justify-between transition">
                            <div>
                                <div class="mb-2 text-sm text-gray-500">Đợt thi: <span class="font-medium text-indigo-700">@item.DotThi</span></div>
                                <div class="mb-2 text-sm text-gray-500">Ca thi: <span class="font-medium">@item.CaThi</span></div>
                                <div class="mb-2 text-sm text-gray-500">Phòng thi: <span class="font-medium">@item.PhongThi</span></div>
                                <div class="mb-2 text-sm text-gray-500">Số báo danh: <span class="font-medium">@item.SoBD</span></div>
                                <div class="mb-2 text-sm text-gray-500">Điểm lý thuyết: <span class="font-medium">@item.DiemLT</span></div>
                                <div class="mb-2 text-sm text-gray-500">Điểm thực hành: <span class="font-medium">@item.DiemTH</span></div>
                            </div>
                            <div class="flex items-center gap-4 mt-4">
                                <a href="/Tinhoc03Edit/@item.Id"
                                   class="text-blue-600 hover:text-blue-800 font-medium underline transition">Sửa thông tin</a>
                                <span>|</span>
                                <a href="/Tinhoc03Detail/@item.Id"
                                   class="text-green-600 hover:text-green-800 font-medium underline transition">Xem chi tiết</a>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="col-span-full text-center text-gray-500 py-10">Không có phiếu đăng ký nào.</div>
                }
            </div>
        </Authorized>
    </AuthorizeView>
</div>

@code {
    List<DangkyTH03> list = new List<DangkyTH03>();
    string ErrMessage = "";
    RadzenDataGrid<DangkyTH03> grid;

    void OnClick(string link)
    {
        NavigationManager.NavigateTo(link, true);
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
            var user = authstate.User;
            var user_name = user.Identity.Name;

            var response = await _httpClient.GetAsync("api/DangkyTH03/TH03GetPhieuDK/" + user_name);
            response.EnsureSuccessStatusCode();
            list = await response.Content.ReadFromJsonAsync<List<DangkyTH03>>();
            ErrMessage = "";
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            ErrMessage = e.Message;
        }
    }
    public void Export(string type)
    {
        try
        {
            Query q = new Query()
            {
                OrderBy = grid.Query.OrderBy,
                Filter = grid.Query.Filter,
                Select = string.Join(",", grid.ColumnsCollection.Where(c => c.GetVisible()))
            };
            service.Export("Lops", type, q);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
}
