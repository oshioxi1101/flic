@page "/Tin03InlineEditList"
@using Flic.Shared
@using System.Net.Http.Headers
@inject HttpClient _httpClient
@inject Blazored.LocalStorage.ILocalStorageService _localStorage

@inject NavigationManager NavigationManager
@inject NorthwindService service
@inject IJSRuntime JsRuntime

<div>
    <PageTitle>Danh sách đăng ký thi chứng chỉ ứng dụng công nghệ thông tin</PageTitle>

    <AuthorizeView>
        <NotAuthorized>
            <span>You're not authorize</span>
        </NotAuthorized>
        <Authorized Context="Auth">
            <div class="row">
                <h3>Danh sách đăng ký thi chứng chỉ ứng dụng công nghệ thông tin</h3>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <RadzenButton Click=@(args => OnClick("/Tinhoc03Register")) Text="Thêm mới" ButtonStyle="ButtonStyle.Primary" />
                    <RadzenButton Click=@(args => OnClick("/Tinhoc03LapDSPT")) Text="Lập DS phòng thi" ButtonStyle="ButtonStyle.Primary" />
                </div>
                <div class="col-md-8">
                    Đợt thi:
                    <RadzenDropDown Data=@_dotthiList TextProperty="Name" ValueProperty="Id" @bind-Value=@maDotthi Placeholder="--Chọn Đợt thi--"
                                    AllowClear="true" Multiple="true" TValue="List<string>" Change=@OnChange />
                    @*
                    <RadzenDropDown @bind-Value=@maDotthi Data=@_dotthiList TextProperty="Name" ValueProperty="Id"
                    Multiple=true AllowClear=true Placeholder="Select products" Style="width: 100%; max-width: 400px;" Change=@OnChange />*@

                    <RadzenButton Text="Export DSĐK" Icon="grid_on" Click="@(args =>ExportDSDK("excel"))" ButtonStyle="ButtonStyle.Primary" />
                    <RadzenButton Text="Export DS đủ ĐK" Icon="grid_on" Click="@(args => Export("excel"))" ButtonStyle="ButtonStyle.Primary" />
                </div>
            </div>
            <div class="row">
                <RadzenDataGrid @ref="grid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true"
                                PageSize="30" AllowSorting="true" EditMode="@editMode" Data="@list" TItem="DangkyTH03_View" RowUpdate="@OnUpdateRow"
                                RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset"
                                ColumnWidth="140px" Style="height:800px">

                    <Columns>
                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="@nameof(DangkyTH03_View.Id)" Title="ID" Width="100px" Filterable="false" Frozen="true" />
                         
                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="@nameof(DangkyTH03_View.HovaDem)" Title="Họ đệm" Width="180px">
                            <EditTemplate Context="order">
                                <RadzenTextBox @bind-Value="order.HovaDem" Style="width:100%; display: block; font-size:small" Name="Hodem" aria-label="Nhập họ đệm" />
                                <RadzenRequiredValidator Text="Họ đệm không được trống" Component="Hodem" Popup="true" />
                            </EditTemplate>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="@nameof(DangkyTH03_View.Ten)" Title="Tên" Width="100px">
                            <EditTemplate Context="order">
                                <RadzenTextBox @bind-Value="order.Ten" Style="width:100%; display: block; font-size:small" Name="Ten" aria-label="Nhập tên" />
                                <RadzenRequiredValidator Text="Tên không được trống" Component="Ten" Popup="true" />
                            </EditTemplate>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="@nameof(DangkyTH03_View.NgaySinh)" Title="Ngày sinh" Width="160px">
                            <EditTemplate Context="order">
                                <RadzenTextBox @bind-Value="order.NgaySinh" Style="width:100%; display: block; font-size:small" Name="Ngaysinh" aria-label="Nhập ngày sinh" />
                                <RadzenRequiredValidator Text="Ngày sinh không được trống" Component="Ngaysinh" Popup="true" />
                            </EditTemplate>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="@nameof(DangkyTH03_View.CCCD)" Title="CCCD" Width="160px">
                            <EditTemplate Context="order">
                                <RadzenTextBox @bind-Value="order.CCCD" Style="width:100%; display: block; font-size:smaller" Name="CCCD" aria-label="Nhập CCCD" />
                                <RadzenRequiredValidator Text="CCCD không được trống" Component="CCCD" Popup="true" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="@nameof(DangkyTH03_View.NoiSinh_Tinh)" Title="Nơi sinh" Width="160px">
                            <EditTemplate Context="order">
                                <RadzenDropDown @bind-Value="order.NoiSinh_Tinh" Data="@TinhList" TextProperty="@nameof(DMTinh.Name)"
                                                ValueProperty="@nameof(DMTinh.Id)"
                                                InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Chọn dân tộc" }})" />
                            </EditTemplate>
                            <Template Context="data">
                                @TinhList.Where(x=>x.Id==data.NoiSinh_Tinh.Value).FirstOrDefault().Name
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="@nameof(DangkyTH03_View.DanToc)" Title="Dân tộc" Width="150px">
                            <EditTemplate Context="order">
                                <RadzenDropDown @bind-Value="order.DanToc" Data="@DantocList" TextProperty="@nameof(DMDantoc.Name)"
                                                ValueProperty="@nameof(DMDantoc.Id)"
                                                InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Chọn dân tộc" }})" />
                            </EditTemplate>
                            <Template Context="data">                                
                                @DantocList.Where(x=>x.Id==data.DanToc.Value).FirstOrDefault().Name
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="@nameof(DangkyTH03_View.DienThoai)" Title="Điện thoại" Width="150px">
                            <EditTemplate Context="order">
                                <RadzenTextBox @bind-Value="order.DienThoai" Style="width:100%; display: block; font-size:smaller" Name="DienThoai" aria-label="Nhập điện thoại" />
                            </EditTemplate>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="@nameof(DangkyTH03_View.DKOnThi)" Title="Ôn" Width="100px">
                            <EditTemplate Context="order">
                                <RadzenNumeric @bind-Value="order.DKOnThi" Style="width:100%; display: block; font-size:smaller" Name="DKOnThi" aria-label="Nhập ĐK ôn" />
                                @* <RadzenRequiredValidator Text="Tên không được trống" Component="Ngaysinh" Popup="true" /> *@
                            </EditTemplate>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="DangkyTH03_View" Property="@nameof(DangkyTH03_View.DuDKThi)" Title="Đủ ĐK" Width="100px">
                            <EditTemplate Context="order">
                                <RadzenCheckBox @bind-Value="order.DuDKThi"  Name="DuDKThi" />
                            </EditTemplate>
                            <Template Context="data">
                                <RadzenCheckBox @bind-value="data.DuDKThi" TValue="bool" TriState="true" Name="DuDKThi" Disabled="false"/>
                            </Template>
                        </RadzenDataGridColumn> 

                        <RadzenDataGridColumn TItem="DangkyTH03_View" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true">
                            <Template Context="order">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                                </RadzenButton>
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            </Template>
                            <EditTemplate Context="order">
                                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(order))" aria-label="Save">
                                </RadzenButton>
                                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(order))" aria-label="Cancel">
                                </RadzenButton>
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(order))" aria-label="Delete">
                                </RadzenButton>
                            </EditTemplate>
                        </RadzenDataGridColumn>

                    </Columns>
                </RadzenDataGrid>
            </div>
            
            <div class="row">

                @if (list != null)
                {
                    <p>
                        Tổng số đăng ký: @list.Count()
                        Tổng số đăng ký ôn: @{
                            double a = list.Where(m => m.DKOnThi == 1).Count();
                            <span>@a.ToString("#,##0")</span>
                        }
                    </p>
                }

            </div>

        </Authorized>
    </AuthorizeView>
</div>

@code {
    List<DangkyTH03_View> list;
    string ErrMessage = "";
    RadzenDataGrid<DangkyTH03_View> grid;
    List<string> dotthList = new List<string>();
    IEnumerable<string> selectedDotthi;

    List<bool> DuDKthiList = new List<bool>();
    IEnumerable<bool> selectedDuDKThi;
    List<Dotthi> _dotthiList;
    bool isLoading;
    int count;
    List<string> maDotthi;
    object selectedValue;
    List<DMDantoc> DantocList = new List<DMDantoc>();
    List<DMTinh> TinhList = new List<DMTinh>();
    List<DMTinh> NoicapList;    
    List<Diemthi> DiemthiList = new List<Diemthi>();
    List<Dotthi> DotthiList = new List<Dotthi>();

    //
    DataGridEditMode editMode = DataGridEditMode.Single;

    List<DangkyTH03_View> ordersToInsert = new List<DangkyTH03_View>();
    List<DangkyTH03_View> ordersToUpdate = new List<DangkyTH03_View>();


    /// <summary>
    void Reset()
    {
        ordersToInsert.Clear();
        ordersToUpdate.Clear();
    }

    void Reset(DangkyTH03_View order)
    {
        ordersToInsert.Remove(order);
        ordersToUpdate.Remove(order);
    }
   
    async Task EditRow(DangkyTH03_View order)
    {   

        if (editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)
        {
            Reset();
        }

        ordersToUpdate.Add(order);
        await grid.EditRow(order);
    }

    async void OnUpdateRow(DangkyTH03_View order)
    {
        Reset(order);

        var response = await _httpClient.PutAsJsonAsync("api/DangkyTH03/TH03Update", @order);
        if (response.IsSuccessStatusCode)
        {

        }else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Saved Successfully!");
        }       
    }

    async Task SaveRow(DangkyTH03_View order)
    {
        await grid.UpdateRow(order);
    }

    async void CancelEdit(DangkyTH03_View order)
    {
        Reset(order);
        grid.CancelEditRow(order);
        DangkyTH03_View item = new DangkyTH03_View();
        try
        {
            if (order.Id > 0)
            {
                item = await _httpClient.GetFromJsonAsync<DangkyTH03_View>("api/DangkyTH03/TH03GetViewByID/" + order.Id);
                var result = from r in list where r.Id == order.Id select r;
                result.First().HovaDem = item.HovaDem;
                result.First().Ten = item.Ten;
                result.First().MaSinhvien = item.MaSinhvien;
                result.First().NganhID = item.NganhID;
                result.First().LopID = item.LopID;
                result.First().Trangthai = item.Trangthai;
                result.First().DKOnThi = item.DKOnThi;
                result.First().DuDKThi = item.DuDKThi;
            }            

        }catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }        
        InvokeAsync(StateHasChanged);        
    }

    async Task DeleteRow(DangkyTH03_View order)
    {
        Reset(order);

        if (list.Contains(order))
        {       
            try{
                var response = await _httpClient.DeleteAsync("api/DangkyTH03/TH03Delete/" + order.Id);
                list.Remove(order);
            }catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }           

            await grid.Reload();
        }
        else
        {
            grid.CancelEditRow(order);
            await grid.Reload();
        }
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var order = new DangkyTH03_View();
        ordersToInsert.Add(order);
        await grid.InsertRow(order);
    }

    async void OnCreateRow(DangkyTH03_View order)
    {
        try
        {            
            var response = await _httpClient.PostAsJsonAsync("api/DangkyTH03/TH03Add", @order);
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error:" + e.Message);          
        }

        ordersToInsert.Remove(order);
    }
    //

    void onpage()
    {
        List<DangkyTH03_View> l1 = new List<DangkyTH03_View>(list);
        Console.WriteLine(this.grid.Page);
        list = l1;
    }
    void OnClick(string link)
    {
        NavigationManager.NavigateTo(link, true);
    }
    protected override async Task OnInitializedAsync()
    {

        try
        {
            _dotthiList = await _httpClient.GetFromJsonAsync<List<Dotthi>>("api/Dotthi/DotthiGetList");

            TinhList = await _httpClient.GetFromJsonAsync<List<DMTinh>>("api/DMTinh/DMTinhGetList");
            
            DantocList = await _httpClient.GetFromJsonAsync<List<DMDantoc>>("api/DMDantoc/DMDantocGetList");
            DiemthiList = await _httpClient.GetFromJsonAsync<List<Diemthi>>("api/Diemthi/DiemthiGetList");
            DotthiList = await _httpClient.GetFromJsonAsync<List<Dotthi>>("api/Diemthi/DiemthiGetList");

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            string ErrMessage = e.Message;
        }
    }
    async Task OnSelectedDotthiChange(object value)
    {
        if (selectedDotthi != null && !selectedDotthi.Any())
        {
            selectedDotthi = null;
        }

        await grid.FirstPage();
    }
    async Task OnSelectedDuDKThiChange(object value)
    {
        if (selectedDuDKThi != null && !selectedDuDKThi.Any())
        {
            selectedDuDKThi = null;
        }

        //await grid.FirstPage();
    }
    public void Export(string type)
    {
        List<DangkyTH03_View> l1 = new List<DangkyTH03_View>(list);

        try
        {
            Query q = new Query()
                {
                    OrderBy = grid.Query.OrderBy,
                    Filter = grid.Query.Filter,
                    Select = string.Join(",", grid.ColumnsCollection.Where(c => c.GetVisible()))//.Select(c => c.Property))
                };
            string combinedString = string.Join(";", maDotthi.ToArray());
            service.Export2("tinhoc03list", type, q, combinedString);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        list = l1;
        InvokeAsync(StateHasChanged);
    }

    public void ExportDSDK(string type)
    {
        List<DangkyTH03_View> l1 = new List<DangkyTH03_View>(list);

        try
        {
            Query q = new Query()
                {
                    OrderBy = grid.Query.OrderBy,
                    Filter = grid.Query.Filter,
                    Select = string.Join(",", grid.ColumnsCollection.Where(c => c.GetVisible()))//.Select(c => c.Property))
                };
            string combinedString = string.Join(";", maDotthi.ToArray());
            service.Export2("tinhoc03dsDuDK", type, q, combinedString);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        list = l1;
        InvokeAsync(StateHasChanged);
    }

    private async void OnChange(object args)
    {
        //Console.WriteLine(args);
        if (maDotthi != null && maDotthi.Count > 0)
        {
            string combinedString = string.Join(";", maDotthi.ToArray());
            var response = await _httpClient.GetAsync("api/DangkyTH03/TH03GetListView/" + combinedString);
            //response.EnsureSuccessStatusCode();
            if (response.IsSuccessStatusCode)
            {
                list = await response.Content.ReadFromJsonAsync<List<DangkyTH03_View>>();
                InvokeAsync(StateHasChanged);
            }
        }
    }

    private async void onChangeState(int id, bool value)
    {
        ChangeDuDKState obj = new ChangeDuDKState();
        obj.id = id;
        //obj.value = !value;
        Console.WriteLine(value);
        List<DangkyTH03_View> list1 = new List<DangkyTH03_View>(list);
        
        var response = await _httpClient.PostAsJsonAsync("api/DangkyTH03/TH03ChangeDuDKState", @obj);
        //Console.WriteLine(this.grid.CurrentPage);
        list = list1;
        this.StateHasChanged();
        //InvokeAsync(StateHasChanged);

    }
}

