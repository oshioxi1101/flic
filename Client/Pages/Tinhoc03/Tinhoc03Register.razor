@page "/Tinhoc03Register/"
@using Flic.Client.Services;
@using Flic.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IAuthService AuthService

<div class="max-w-2xl mx-auto bg-white p-8 rounded-2xl shadow-lg mt-10">
    <h2 class="text-2xl md:text-3xl font-bold text-center text-indigo-700 mb-8">ĐĂNG KÝ THI CHỨNG CHỈ TIN HỌC THEO THÔNG TƯ 03</h2>

    <RadzenTemplateForm TItem="DangkyTH03" Data="@item" Submit="@OnSubmit" class="space-y-4">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Mã SV -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Mã SV <span class="text-red-500">*</span></label>
                <RadzenTextBox Name="MaSinhvien" @bind-Value="@item.MaSinhvien" Placeholder="Nhập mã sinh viên" Change="() => LostFocus()" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-indigo-400" />
                <RadzenRequiredValidator Component="MaSinhvien" Text="Mã sinh viên không được để trống!" />
            </div>
            <!-- CCCD -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">CCCD <span class="text-red-500">*</span></label>
                <RadzenTextBox Name="CCCD" @bind-Value="@item.CCCD" Placeholder="Nhập số CCCD" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-indigo-400" />
                <RadzenRequiredValidator Component="CCCD" Text="Nhập Số CCCD!" />
            </div>

            <!-- Họ đệm -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Họ đệm <span class="text-red-500">*</span></label>
                <RadzenTextBox Name="HovaDem" @bind-Value="@item.HovaDem" Placeholder="Họ và đệm" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-indigo-400" />
                <RadzenRequiredValidator Component="HovaDem" Text="Họ và đệm không được để trống!" />
            </div>
            <!-- Tên -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Tên <span class="text-red-500">*</span></label>
                <RadzenTextBox Name="Ten" @bind-Value="@item.Ten" Placeholder="Tên" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-indigo-400" />
                <RadzenRequiredValidator Component="Ten" Text="Nhập Tên!" />
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Ngày sinh -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Ngày sinh <span class="text-red-500">*</span></label>
                <RadzenTextBox Name="NgaySinh" @bind-Value="@item.NgaySinh" Placeholder="dd/mm/yyyy" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-indigo-400" />
                <RadzenRequiredValidator Component="NgaySinh" Text="Nhập ngày sinh!" />
            </div>
            <!-- Nơi sinh -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Nơi sinh <span class="text-red-500">*</span></label>
                <RadzenDropDown Name="NS_Tinh" TValue="int" Data="@TinhList" TextProperty="Name" ValueProperty="Id" @bind-Value="@item.NoiSinh_Tinh" Placeholder="--Chọn nơi sinh--" class="w-full" />
                <RadzenRequiredValidator Component="NS_Tinh" Text="Nhập nơi sinh!" />
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Khóa học -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Khóa học</label>
                <RadzenDropDown TValue="string" @bind-Value="@item.KhoahocID" Placeholder="--Chọn khóa học--" AllowFiltering="true" Data="@(KhoahocList)" TextProperty="Name" ValueProperty="Id" class="w-full" />
            </div>
            <!-- Khoa -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Khoa</label>
                <RadzenDropDown TValue="string" @bind-Value="@item.KhoaID" Placeholder="--Chọn Khoa--" AllowFiltering="true" Data="@(KhoaList)" TextProperty="Name" ValueProperty="Id" class="w-full" />
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Ngành -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Ngành</label>
                <RadzenDropDown TValue="string" @bind-Value="@item.NganhID" Placeholder="--Chọn Ngành--" AllowFiltering="true" Data="@(NganhList)" TextProperty="Name" ValueProperty="Id" class="w-full" />
            </div>
            <!-- Lớp -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Lớp</label>
                <RadzenDropDown TValue="string" @bind-Value="@item.LopID" Placeholder="--Chọn Lớp--" Data="@(LopList.Where(o => o.KhoahocID == item.KhoahocID && o.KhoaID == item.KhoaID && o.NganhID == item.NganhID))" ValueProperty="Id" TextProperty="Name" class="w-full" />
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Giới tính -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Giới tính <span class="text-red-500">*</span></label>
                <RadzenDropDown Name="GioiTinh" TValue="int" Data="@GioiTinhList" TextProperty="Name" ValueProperty="Id" @bind-Value="@item.GioiTinh" Placeholder="Chọn giới tính" class="w-full" />
                <RadzenRequiredValidator Component="GioiTinh" Text="Nhập Giới tính!" />
            </div>
            <!-- Dân tộc -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Dân tộc <span class="text-red-500">*</span></label>
                <RadzenDropDown Name="DanToc" TValue="int" Data="@DantocList" TextProperty="Name" ValueProperty="Id" @bind-Value="@item.DanToc" Placeholder="--Chọn Dân tộc--" class="w-full" />
                <RadzenRequiredValidator Component="DanToc" Text="Nhập Dân tộc!" />
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Điện thoại -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Điện thoại <span class="text-red-500">*</span></label>
                <RadzenTextBox Name="DienThoai" @bind-Value="@item.DienThoai" Placeholder="Điện thoại" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-indigo-400" />
                <RadzenRequiredValidator Component="DienThoai" Text="Nhập Điện thoại!" />
            </div>
            <!-- Email -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Email <span class="text-red-500">*</span></label>
                <RadzenTextBox Name="Email" @bind-Value="@item.Email" Placeholder="Email" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-indigo-400" />
                <RadzenRequiredValidator Component="Email" Text="Nhập Email!" />
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Địa chỉ -->
            <div class="md:col-span-2">
                <label class="block mb-1 text-sm font-medium text-gray-700">Địa chỉ thường trú <span class="text-red-500">*</span></label>
                <RadzenTextBox Name="DiaChi" @bind-Value="@item.DiaChi" Placeholder="Địa chỉ thường trú" Style="width: 100%" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-indigo-400" />
                <RadzenRequiredValidator Component="DiaChi" Text="Nhập địa chỉ!" />
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Mật khẩu -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Mật khẩu <span class="text-red-500">*</span></label>
                <RadzenTextBox Name="MatKhau" @bind-Value="@item.Matkhau" Placeholder="Nhập mật khẩu" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-indigo-400" />
                <RadzenRequiredValidator Component="MatKhau" Text="Nhập mật khẩu!" />
            </div>
            <!-- Ngày cấp CCCD -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Ngày cấp</label>
                <RadzenTextBox Name="CCCD_NgayCap" @bind-Value="@item.CCCD_NgayCap" Placeholder="Ngày cấp (dd/mm/yyyy)" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-indigo-400" />
            </div>
            <!-- Nơi cấp CCCD -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Nơi cấp</label>
                <RadzenTextBox Name="CCCD_NoiCap" @bind-Value="@item.CCCD_NoiCap" Placeholder="Nơi cấp" class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-indigo-400" />
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Điểm thi -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Điểm thi <span class="text-red-500">*</span></label>
                <RadzenDropDown Name="DiemThi" TValue="string" Data="@DiemthiList" TextProperty="Name" ValueProperty="Id" @bind-Value="@item.DiaDiemThi" Placeholder="--Chọn Điểm thi--" class="w-full" />
                <RadzenRequiredValidator Component="DiemThi" Text="Nhập Điểm thi!" />
            </div>
            <!-- Đợt thi -->
            <div>
                <label class="block mb-1 text-sm font-medium text-gray-700">Đợt thi <span class="text-red-500">*</span></label>
                <RadzenDropDown Name="DotThi" TValue="string" Data="@DotthiList" TextProperty="Name" ValueProperty="Id" @bind-Value="@item.DotThi" Placeholder="--Chọn Đợt thi--" class="w-full" />
                <RadzenRequiredValidator Component="DotThi" Text="Nhập đợt thi!" />
            </div>
        </div>

        <!-- Ôn thi -->
        <div class="flex items-center gap-2 pt-2">
            <RadzenCheckBox TValue="bool" Name="OnThi" @bind-Value="dkOnthi" Change="@(args => @OnChange(args, ""))" class="mr-2" />
            <span class="text-sm font-medium text-gray-700">Đăng ký ôn thi</span>
        </div>

        <!-- Nút Submit/Cancel -->
        <div class="flex justify-center gap-6 mt-6">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Lưu" class="!bg-indigo-600 !text-white !rounded-lg !px-8 !py-2 hover:!bg-indigo-700 transition" />
            <RadzenButton ButtonType="ButtonType.Button" Click="@Cancel" Text="Hủy" class="!bg-gray-300 !text-gray-700 !rounded-lg !px-8 !py-2 hover:!bg-gray-400 transition" />
        </div>
    </RadzenTemplateForm>
</div>

@code {
    DangkyTH03 item = new DangkyTH03();

    List<DMTinh> TinhList = new();
    List<DMDantoc> DantocList = new();
    List<Diemthi> DiemthiList = new();
    List<Dotthi> DotthiList = new();
    List<Khoa> KhoaList = new();
    List<Khoahoc> KhoahocList = new();
    List<Nganh> NganhList = new();
    List<Lop> LopList = new();
    string errStr = "";
    private bool dkOnthi;
    private class GioiTinh
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
    IEnumerable<GioiTinh> GioiTinhList = new List<GioiTinh>() { new GioiTinh() { Id = 1, Name = "Nam" }, new GioiTinh() { Id = 0, Name = "Nữ" } };

    protected async void LostFocus()
    {
        var response = await Http.GetAsync("api/Student/StudentGetByMSV/" + item.MaSinhvien);
        if (response.IsSuccessStatusCode)
        {
            Student sv = await response.Content.ReadFromJsonAsync<Student>();
            item.HovaDem = sv.HoDem;
            item.Ten = sv.Ten;
            item.NgaySinh = sv.Ngaysinh;
            item.CCCD = sv.CCCD;
            item.DienThoai = sv.DienThoai;
            item.Email = sv.Email;
            item.KhoahocID = sv.KhoahocID;
            item.KhoaID = sv.KhoaID;
            item.NganhID = sv.NganhID;
            item.LopID = sv.LopID;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync("api/DMTinh/DMTinhGetList");
            TinhList = await response.Content.ReadFromJsonAsync<List<DMTinh>>() ?? new();

            response = await Http.GetAsync("api/DMDantoc/DMDantocGetList");
            DantocList = await response.Content.ReadFromJsonAsync<List<DMDantoc>>() ?? new();

            response = await Http.GetAsync("api/Diemthi/DiemthiGetList");
            DiemthiList = await response.Content.ReadFromJsonAsync<List<Diemthi>>() ?? new();

            response = await Http.GetAsync("api/Dotthi/DotthiGetListActive");
            DotthiList = await response.Content.ReadFromJsonAsync<List<Dotthi>>() ?? new();

            response = await Http.GetAsync("api/Khoa/KhoaGetList");
            KhoaList = await response.Content.ReadFromJsonAsync<List<Khoa>>() ?? new();

            response = await Http.GetAsync("api/Khoahoc/KhoahocGetList");
            KhoahocList = await response.Content.ReadFromJsonAsync<List<Khoahoc>>() ?? new();

            NganhList = await Http.GetFromJsonAsync<List<Nganh>>("api/Nganh/NganhGetList") ?? new();
            LopList = await Http.GetFromJsonAsync<List<Lop>>("api/Lop/LopGetList") ?? new();

            item.DanToc = -1;
            item.NoiSinh_Tinh = -1;
            item.GioiTinh = 1;
            item.DiaDiemThi = "";
            item.DotThi = "";
            item.KhoaID = "";
            item.KhoahocID = "";
            item.LopID = "";
            item.NganhID = "";
        }
        catch (Exception) { }
    }
    void OnChange(bool value, string name)
    {
        if (value) item.DKOnThi = 1;
        else item.DKOnThi = 0;
    }
    protected async Task OnSubmit()
    {
        try
        {
            var response = await Http.GetAsync("api/Dotthi/DotthiGetByID/" + item.DotThi);
            if (response.IsSuccessStatusCode)
            {
                var dt = await response.Content.ReadFromJsonAsync<Dotthi>();
                if (item.DKOnThi == 1) item.LePhiOn = dt.PhiOn.Value;
                item.LePhiThi = dt.Phithi.Value;
            }

            item.Trangthai = -1;
            response = await Http.PostAsJsonAsync("api/DangkyTH03/TH03Add", @item);
            if (response.IsSuccessStatusCode)
            {
                var checkExist = await response.Content.ReadFromJsonAsync<int>();
                if (checkExist == 0)
                {
                    await JsRuntime.InvokeVoidAsync("alert", "Thông tin đăng ký đã tồn tại trên hệ thống! Hãy đăng nhập để xem chi tiết!");
                    return;
                }
                RegisterModel Reg = new RegisterModel();
                Reg.Username = item.CCCD;
                Reg.Email = item.Email;
                Reg.Password = item.Matkhau;
                Reg.ConfirmPassword = item.Matkhau;
                Reg.Role = "TIN03";
                var check = await Http.GetFromJsonAsync<bool>("api/accounts/CheckUserExist/" + Reg.Username);
                if (!check)
                {
                    var result = await AuthService.Register(Reg);
                    try
                    {
                        EmailData emailData = new EmailData();
                        emailData.EmailToId = item.Email;
                        emailData.EmailToName = item.HovaDem + " " + item.Ten;
                        string _text = "Trung tâm Ngoại ngữ-Tin học thông báo bạn đã đăng ký thành công!<br>";
                        _text += "Tài khoản của bạn là số CCCD: <b>" + item.CCCD + "</b>, mật khẩu: <b>" + item.Matkhau + "</b><br>";
                        _text += "Thông tin chi tiết xin liên hệ với Trung tâm Ngoại ngữ-Tin học";
                        emailData.EmailSubject = "Thông báo đăng ký thi chứng chỉ Tin học thành công";
                        emailData.EmailBody = _text;
                        var _mail = await Http.PostAsJsonAsync("api/Email/SendEmail", @emailData);
                        if (_mail.IsSuccessStatusCode)
                            await JsRuntime.InvokeVoidAsync("alert", "Đăng ký thành công! Vui lòng kiểm tra Email để nhận thông tin chi tiết.");
                        else
                            await JsRuntime.InvokeVoidAsync("alert", "Đăng ký thành công! Không gửi được Email. Bạn hãy đăng nhập để xem chi tiết.");
                    }
                    catch (Exception e)
                    {
                        await JsRuntime.InvokeVoidAsync("alert", "Lỗi gửi email: " + e.Message);
                    }
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("alert", "Đăng ký thành công! Hãy đăng nhập để xem/sửa thông tin chi tiết.");
                }
            }
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error: " + e.Message);
        }
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}
